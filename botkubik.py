from config import TOKEN
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import random
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keybutton = [
        [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (1-6)", callback_data='dice')],
        [InlineKeyboardButton("ü™ô –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É", callback_data='flip')],
        [InlineKeyboardButton("üî¢ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ (1-100)", callback_data='random')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keybutton)

    if update.message:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}üëã\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}üëã\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:",
            reply_markup=reply_markup
        )
    
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'dice':
        await dice(update, context)
    elif query.data == 'flip':
        await flip_animation(update, context)
    elif query.data == 'random':
        await random_cmd(update, context)
    elif query.data == 'help':
        await help_command(update, context)
    elif query.data == 'start':
        await start(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
           "/dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (1-6)\n"
           "/flip - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É\n"
           "/random - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ (1-100)\n"
           "/help - –ø–æ–º–æ—â—å")
    
    if update.message:
        await update.message.reply_text(text)
    else:
        await update.callback_query.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /dice
async def dice_animation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dice_value = random.randint(1, 6)
    keybutton = [
        [InlineKeyboardButton("–ï—â–µ —Ä–∞–∑ üîÅ", callback_data='dice')],
        [InlineKeyboardButton("‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keybutton)

    animation_frames = [
        "üé≤ –ö—É–±–∏–∫ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è...",
        f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}"
    ]
    
    if update.message:
        message = await update.message.reply_text(animation_frames[0])
        for frame in animation_frames[1:-1]:
            await message.edit_text(frame)
        await asyncio.sleep(0.5)
        await message.edit_text(animation_frames[-1], reply_markup=reply_markup)
    else:
        query = update.callback_query
        for frame in animation_frames:
            await query.edit_message_text(frame)
            await asyncio.sleep(0.5)
        await query.edit_message_text(animation_frames[-1], reply_markup=reply_markup)
   
    
async def random_cmd_animation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random_value = random.randint(1, 100)
    keybutton = [
        [InlineKeyboardButton("–ï—â–µ —Ä–∞–∑ üîÅ", callback_data='random')],
        [InlineKeyboardButton("‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keybutton)

    animation_frames = [
        "üî¢ –ß–∏—Å–ª–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...",
        f"üî¢ –í—ã–ø–∞–ª–æ: {random_value}"
    ]
    
    if update.message:
        message = await update.message.reply_text(animation_frames[0])
        for frame in animation_frames[1:-1]:
            await message.edit_text(frame)
        await asyncio.sleep(0.5)
        await message.edit_text(animation_frames[-1], reply_markup=reply_markup)
    else:
        query = update.callback_query
        for frame in animation_frames:
            await query.edit_message_text(frame)
            await asyncio.sleep(0.5)
        await query.edit_message_text(animation_frames[-1], reply_markup=reply_markup)

# –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏
async def flip_animation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    flip_value = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
    keybutton = [
        [InlineKeyboardButton("–ï—â–µ —Ä–∞–∑ üîÅ", callback_data='flip')],
        [InlineKeyboardButton("‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keybutton)
    
    animation_frames = [
        "ü™ô –ú–æ–Ω–µ—Ç–∞ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è...",
        f"ü™ô –í—ã–ø–∞–ª–æ: {flip_value}"
    ]
    
    if update.message:
        message = await update.message.reply_text(animation_frames[0])
        for frame in animation_frames[1:-1]:
            await message.edit_text(frame)
        await asyncio.sleep(0.5)
        await message.edit_text(animation_frames[-1], reply_markup=reply_markup)
    else:
        query = update.callback_query
        for frame in animation_frames:
            await query.edit_message_text(frame)
            await asyncio.sleep(0.5)
        await query.edit_message_text(animation_frames[-1], reply_markup=reply_markup)

# –û–±—ã—á–Ω–æ–µ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
async def flip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await flip_animation(update, context)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await dice_animation(update, context)

async def random_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await random_cmd_animation(update, context)



def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("random", random_cmd))
    application.add_handler(CommandHandler("dice", dice))
    application.add_handler(CommandHandler("flip", flip))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    #–∑–∞–ø—É—Å–∫ 
    application.run_polling()

if __name__ == '__main__':
    main()